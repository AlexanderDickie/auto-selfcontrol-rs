
/*
many of these tests need to be manually inspected by looking at the consequent behavior of the
self control program
*/
// #[cfg(test)]
// mod tests {
//     use super::*;
//     const SC_PATH: &str = "/Applications/SelfControl.app/Contents/MacOS/org.eyebeam.SelfControl";
//
//     #[test]
//     fn build_config() {
//         let config = 
// r#"{
//     "self_control_path": "/Applications/SelfControl.app/Contents/MacOS/org.eyebeam.SelfControl",
//     "launch_agents_path": "/Users/username/Library/LaunchAgents",
//     "blocks": [
//         ["12:00:00",
//          "13:00:00"],
//
//         ["14:00:00",
//          "15:00:00"]
//     ]
// }
// "#;
//         fs::write("test_config.json", config).unwrap();
//         let path = Path::new("test_config.json");
//         let config = Config::build(&path.to_path_buf());
//         println!("{:?}", config);
//         fs::remove_file("test_config.json").unwrap();
//     }
//
//     #[test]
//     fn sc_parse_cli_settings_generic() {
//         let s = "{
//             k1=v1;
//             k2=v2;
//             }".to_string();
//         let output = Command::new(SC_PATH)
//             .arg("print-settings")
//             .output().unwrap();
//         let stderr = String::from_utf8(output.stderr).unwrap();
//         let settings =  SC_parse_print_settings(&stderr);
//         println!("{:?}", settings);
//     }
//
//     #[test]
//     fn sc_is_active_generic() {
//         let o = SC_is_active(SC_PATH);
//         println!("{:?}", o);
//     }
//
//     #[test]
//     fn SC_begin_block_generic() {
//         let now = Local::now().time();
//         SC_begin_block(SC_PATH, Duration::minutes(2)).unwrap();
//     }
//
//     #[test]
//     fn ffi_generic() {
//         let name = CFString::new("org.eyebeam.SelfControl");
//         unsafe {
//             println!("cfprefs {}", CFPreferencesAppSynchronize(name));
//         }
//     }
//
//     #[test]
//     fn build_plist_commands_generic() {
//         let command: &str = "cmd".into();
//         let args = vec!["arg1", "arg2"];
//
//         let output = build_plist_commands(command, &args);
//         let expected = 
// r#"    <key>ProgramArguments</key>
//     <array>
//         <string>cmd</string>
//         <string>arg1</string>
//         <string>arg2</string>
//     </array>"#.to_string();                             
//         for pair in output.lines().zip(expected.lines()) {
//             assert_eq!(pair.0, pair.1);
//         }
//     }
//
//
//     #[test]
//     fn build_launch_agent_periodic() {
//         let command: &str = "cmd".into();
//         let args = vec!["arg1".to_string(), "arg2".to_string()];
//         let start_date = Local::now().naive_local();
//         let schedle = LaunchAgentSchedule::Periodic(Duration::seconds(60 * 5));
//
//         let output = build_launch_agent_plist(
//             "name".into(),
//             "touch".into(),
//             &vec!["arg1".into(), "arg2".into()],
//             &schedle,
//         );
//         println!("{}", output); 
//     }
//
//     #[test]
//     fn build_launch_agent_calendar() {
//         let command: &str = "cmd".into();
//         let args = vec!["arg1".to_string(), "arg2".to_string()];
//         let start_date = Local::now().naive_local();
//         let times = vec![
//             NaiveTime::from_hms(15, 10, 0),
//             NaiveTime::from_hms(10, 55, 20)];
//         let schedle = LaunchAgentSchedule::Calendar(&times);
//
//         let output = build_launch_agent_plist(
//             "name".into(),
//             "touch".into(),
//             &vec!["arg1".into(), "arg2".into()],
//             &schedle,
//         );
//         println!("{}", output); 
//     }
//
//     #[test]
//     fn persevere_SC_begin_block_generic() {
//         let now = Local::now().time();
//         let end = now + chrono::Duration::minutes(2);
//         insist_SC_begin_block(SC_PATH, end).unwrap();
//     }
// }
